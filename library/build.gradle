apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'maven'

ext {
    bintrayRepo = 'maven'
    bintrayName = POM_NAME

    publishedGroupId = GROUP
    libraryName = POM_NAME
    artifact = POM_ARTIFACT_ID

    libraryDescription = POM_DESCRIPTION

    siteUrl = POM_URL
    gitUrl = GIT_URL

    libraryVersion = VERSION_NAME

    developerId = POM_DEVELOPER_ID
    developerName = POM_DEVELOPER_NAME
    developerEmail = POM_DEVELOPER_EMAIL

    packageMethod = POM_PACKAGING

    licenseName = 'The MIT License (MIT)'
    licenseUrl = 'https://opensource.org/licenses/mit-license.php'
    allLicenses = ["MIT"]
}

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionName VERSION_NAME as String
        consumerProguardFiles 'proguard-rules.txt'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    provided("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }

    provided("com.tencent.tinker:tinker-android-loader:${TINKER_VERSION}") { changing = true }
    provided("com.tencent.tinker:aosp-dexutils:${TINKER_VERSION}") { changing = true }
    provided("com.tencent.tinker:bsdiff-util:${TINKER_VERSION}") { changing = true }
    provided("com.tencent.tinker:tinker-commons:${TINKER_VERSION}") { changing = true }

    testCompile 'junit:junit:4.12'
    testCompile "org.powermock:powermock-module-junit4:1.6.2"
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.2"
    testCompile "org.powermock:powermock-api-mockito:1.6.2"
    testCompile "org.powermock:powermock-classloading-xstream:1.6.2"
}

task buildSdk(type: Copy, dependsOn: [build]) {
    from("$buildDir/outputs/aar/") {
        include "${project.getName()}-release.aar"
    }

    into(rootProject.file("buildSdk/android/"))
    rename { String fileName ->
        fileName.replace("release", "${version}")
    }
}

afterEvaluate {
    task findbugs(type: FindBugs, dependsOn: "assembleDebug") {

        description 'Run findbugs'
        group 'verification'

        classes = fileTree('build/intermediates/classes/debug/')
        source = fileTree('src/main/java')
        classpath = project.configurations.compile

        effort = 'max'

        excludeFilter = file("findbugs-exclude.xml")

        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    check.dependsOn('findbugs')

    pmd {
        toolVersion '5.4.0'
    }

    task pmd(type: Pmd) {
        targetJdk = TargetJdk.VERSION_1_7

        description 'Run pmd'
        group 'verification'

        // If ruleSets is not empty, it seems to contain some
        // defaults which override rules in the ruleset file...
        ruleSets = []
        ruleSetFiles = files('pmd-ruleset.xml')
        source = fileTree('src/main/java')

        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    check.dependsOn('pmd')
}

apply from: "${rootProject.projectDir}/gradle/install.gradle"
apply from: "${rootProject.projectDir}/gradle/bintray.gradle"
